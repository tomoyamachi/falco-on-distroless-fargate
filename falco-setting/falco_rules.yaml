- macro: open_write
  condition: (evt.type=open or evt.type=openat) and evt.is_open_write=true and fd.typechar='f' and fd.num>=0

- macro: open_read
  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='f' and fd.num>=0

- macro: open_directory
  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='d' and fd.num>=0

# I/O
## ファイル作成
- rule: Write below binary dir
  desc: an attempt to write to any file below a set of binary directories
  condition: evt.dir = < and open_write
  output: >
    File opened for writing (user=%user.name user_loginuid=%user.loginuid
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] container_id=%container.id image=%container.image.repository)
  priority: ERROR
  tags: [filesystem]

## ファイル読み込み/実行
- list: allow_read_files
  items: ["/app"]
- macro: sys_dir
  condition: fd.name startswith /sys/ or fd.name startswith /proc/

- rule: Read  dir
  desc: an attempt to write to any file below a set of binary directories
  condition: evt.dir = < and open_read and (not (sys_dir or fd.name in (allow_read_files)))
  output: >
    File opened for Reading (user=%user.name user_loginuid=%user.loginuid
    command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] container_id=%container.id image=%container.image.repository)
  priority: ERROR
  tags: [filesystem]

# ネットワーク
- macro: inbound
  condition: >
    (((evt.type in (accept,listen) and evt.dir=<) or
      (evt.type in (recvfrom,recvmsg) and evt.dir=< and
       fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
     (fd.typechar = 4 or fd.typechar = 6) and
     (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8") and
     (evt.rawres >= 0 or evt.res = EINPROGRESS))
# RFC1918 addresses were assigned for private network usage
- list: rfc_1918_addresses
  items: ['"10.0.0.0/8"', '"172.16.0.0/12"', '"192.168.0.0/16"']

- macro: outbound
  condition: >
    (((evt.type = connect and evt.dir=<) or
      (evt.type in (sendto,sendmsg) and evt.dir=< and
       fd.l4proto != tcp and fd.connected=false and fd.name_changed=true)) and
     (fd.typechar = 4 or fd.typechar = 6) and
     (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8" and not fd.snet in (rfc_1918_addresses)) and
     (evt.rawres >= 0 or evt.res = EINPROGRESS))
## インバウンド/アウトバウンド
- macro: inbound_outbound
  condition: >
    ((((evt.type in (accept,listen,connect) and evt.dir=<)) or
     (fd.typechar = 4 or fd.typechar = 6)) and
     (fd.ip != "0.0.0.0" and fd.net != "127.0.0.0/8") and
     (evt.rawres >= 0 or evt.res = EINPROGRESS))
## UDPは全面禁止
- rule: Unexpected UDP Traffic
  desc: detect UDP traffic
  condition: (inbound_outbound) and fd.l4proto=udp
  output: >
    UDP Traffic
    (user=%user.name user_loginuid=%user.loginuid command=%proc.cmdline port=%fd.sport connection=%fd.name proto=%fd.l4proto evt=%evt.type %evt.args container_id=%container.id image=%container.image.repository)
  priority: ERROR
  tags: [network]

## インバウンドポートの制限
- macro: valid_inbound_port
  condition: fd.sport!=443
- rule: Disallowed Connection
  desc: Detect any new connection to a host other than those in an allowed group of hosts
  condition: inbound and valid_inbound_port
  output: Disallowed Connection (command=%proc.cmdline connection=%fd.name user=%user.name user_loginuid=%user.loginuid container_id=%container.id image=%container.image.repository)
  priority: ERROR
  tags: [network, mitre_remote_service]

## アウトバウンドポートの制限
- macro: valid_outbound_port
  condition: fd.rport in (3306)
- rule: Unexpected outbound connection destination
  desc: Detect any outbound connection to a destination outside of an allowed set of ips, networks, or domain names
  condition: outbound and valid_outbound_port
  output: Disallowed outbound connection destination (command=%proc.cmdline connection=%fd.name user=%user.name user_loginuid=%user.loginuid container_id=%container.id image=%container.image.repository)
  priority: ERROR
  tags: [network]

# cronを許可しない
- macro: never_true
  condition: (evt.num=0)
- macro: spawned_process
  condition: evt.type = execve and evt.dir=<
- macro: consider_all_cron_jobs
  condition: (never_true)
- macro: user_known_cron_jobs
  condition: (never_true)
- rule: Schedule Cron Jobs
  desc: Detect cron jobs scheduled
  condition: >
    ((open_write and fd.name startswith /etc/cron) or
     (spawned_process and proc.name = "crontab")) and
    consider_all_cron_jobs and
    not user_known_cron_jobs
  output: >
    Cron jobs were scheduled to run (user=%user.name user_loginuid=%user.loginuid command=%proc.cmdline
    file=%fd.name container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
  priority: ERROR
  tags: [file]